### Presumably, you would have properties and logic to fill in the various items listed below in all caps

global
    pidfile /var/run/haproxy.pid
    log 127.0.0.1 local0 info

defaults
    mode http

    clitimeout          600000   # maximum inactivity time on the client side
    srvtimeout          600000   # maximum inactivity time on the server side
    timeout connect     8000     # maximum time to wait for a connection attempt to a server to succeed

    stats enable
    stats auth          admin:password
    stats uri           /monitor
    stats refresh       5s
    
    ### SET an httpcheck path that works for the given backend service
    ### Eg. GET /index.html
    option httpchk      HTTPCHK
    retries             5
    option redispatch

### Set FRONTEND_NAME to something that makes sense for the given application
frontend FRONTEND_NAME
	### The port to bind the load balancer to
    bind :80
    monitor-uri   /haproxy  # end point to monitor HAProxy status (returns 200)

	### define an ACL based on a path regular expression
	### Read HAproxy documentation for other ways to create ACLs
	### ACL_PATH example could be simply /index.html
    acl ACL_NAME path_reg ACL_PATH

	### Set BACKEND_NAME and ACL_NAME accordingly
    use_backend BACKEND_NAME if ACL_NAME

### Set BACKEND_NAME to something that matches the backend service being balanced
backend BACKEND_NAME
	### SET balancing algorithm
	### options include roundrobin or source
	# sticks to a given source IP
    # balance source 
    
    ## this sets up cookie based 
    balance roundrobin
    cookie SERVERID insert indirect nocache
    ## 
    
    ### POPULATE server entries for each backend server - presumably this is done by the recipe via add-node type of constructs
    ### Read HAproxy documentation to tinker with weight, maxconn, etc.
    ### server LOGICAL_SERVER_NAME BACKEND_SERVER_IP:BACKEND_SERVER_PORT weight 1 maxconn 100 check inter 4000 cookie LOGICAL_SERVER_NAME
    #INSERT BACKEND SERVER ENTRY HERE#
